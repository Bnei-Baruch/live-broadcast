var path = require('path');
var webpack = require('webpack');
var HtmlWebpackPlugin = require('html-webpack-plugin');
var ExtractTextPlugin = require("extract-text-webpack-plugin");

module.exports = function (options) {
    var entry, plugins, cssLoaders, debug, devtool;

    // If production is true
    if (options.prod) {
        // Entry
        entry = [
            path.resolve(__dirname, 'js/app.js')
        ];

        debug = false;
        devtool = '';

        cssLoaders = ExtractTextPlugin.extract('style-loader', 'css-loader!postcss-loader');
        // Plugins
        plugins = [
            new webpack.DefinePlugin({
                "process.env": {
                    NODE_ENV: JSON.stringify("production"),
                    IS_BROWSER: true
                }
            }),
            new ExtractTextPlugin('[name]-[contenthash].css'),
            new webpack.optimize.DedupePlugin(),
            new webpack.optimize.OccurenceOrderPlugin(),
            new webpack.optimize.UglifyJsPlugin({
                compress: {
                    screw_ie8: true,
                    warnings: false
                }
            }),
            new HtmlWebpackPlugin({
                template: 'index.html', // Move the index.html file...
                minify: { // Minifying it while it is parsed
                    removeComments: true,
                    collapseWhitespace: true,
                    removeRedundantAttributes: true,
                    useShortDoctype: true,
                    removeEmptyAttributes: true,
                    removeStyleLinkTypeAttributes: true,
                    keepClosingSlash: true,
                    minifyJS: true,
                    minifyCSS: true,
                    minifyURLs: true
                },
                inject: true // inject all files that are generated by webpack, e.g. bundle.js, main.css with the correct HTML tags
            })
        ];

        // If app is in development
    } else {
        // Entry
        entry = [
            "webpack-dev-server/client?http://localhost:3000", // Needed for hot reloading
            "webpack/hot/only-dev-server", // See above
            path.resolve(__dirname, 'js/app.js') // Start with js/app.js...
        ];

        debug = true;
        devtool = 'cheap-module-inline-source-map';

        cssLoaders = 'style-loader!css-loader!postcss-loader';
        // Only plugin is the hot module replacement plugin
        plugins = [
            new webpack.HotModuleReplacementPlugin(), // Make hot loading work
            new HtmlWebpackPlugin({
                template: 'index.html', // Move the index.html file
                inject: true // inject all files that are generated by webpack, e.g. bundle.js, main.css with the correct HTML tags
            })
        ]
    }

    return {
        entry: entry,
        debug: debug,
        devtool: devtool,
        output: { // Compile into js/build.js
            path: path.resolve(__dirname, options.prod ? './dist' : './build'),

            filename: '[name]-[hash].js'
        },
        module: {
            loaders: [{
                test: /\.(js|jsx)$/,
                exclude: /node_modules/,
                loader: 'babel',
                query: {
                    cacheDirectory: true,
                    plugins: ['transform-runtime'],
                    presets: ['es2015', 'react', 'stage-2'],
                    env: {
                        production: {
                            presets: ['react-optimize']
                        },
                        development: {
                            presets: ['react-hmre']
                        }
                    }
                }
            },
                {
                test: /\.css$/, // Transform all .css files required somewhere within an entry point...
                loader: cssLoaders // ...with PostCSS
            },
            {
                test: /\.jpe?g$|\.gif$|\.png$/i,
                loader: "url-loader?limit=10000"
            }
            ]
        },
        plugins: plugins,
        postcss: function () {
            return [
                require('postcss-import')({ // Import all the css files...
                    glob: true,
                    onImport: function (files) {
                        files.forEach(this.addDependency); // ...and add dependecies from the main.css files to the other css files...
                    }.bind(this) // ...so they get hotâ€“reloaded when something changes...
                }),
                require('postcss-simple-vars')(), // ...then replace the variables...
                require('postcss-focus')(), // ...add a :focus to ever :hover...
                require('autoprefixer')({ // ...and add vendor prefixes...
                    browsers: ['last 2 versions', 'IE > 8'] // ...supporting the last 2 major browser versions and IE 8 and up...
                }),
                require('postcss-reporter')({ // This plugin makes sure we get warnings in the console
                    clearMessages: true
                })
            ];
        },
        target: "web", // Make web variables accessible to webpack, e.g. window
        stats: false,
        progress: true
    }
};
